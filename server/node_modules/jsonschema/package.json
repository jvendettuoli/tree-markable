{
  "_from": "jsonschema",
  "_id": "jsonschema@1.4.0",
  "_inBundle": false,
  "_integrity": "sha512-/YgW6pRMr6M7C+4o8kS+B/2myEpHCrxO4PEWnqJNBFMjn7EWXqlQ4tGwL6xTHeRplwuZmcAncdvfOad1nT2yMw==",
  "_location": "/jsonschema",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "jsonschema",
    "fetchSpec": "latest",
    "name": "jsonschema",
    "raw": "jsonschema",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/jsonschema/-/jsonschema-1.4.0.tgz",
  "_shasum": "1afa34c4bc22190d8e42271ec17ac8b3404f87b2",
  "_shrinkwrap": null,
  "_spec": "jsonschema",
  "_where": "/home/justin/Documents/Springboard/SECT/Capstone_tree_markable/server",
  "author": {
    "email": "tom@degrunt.nl",
    "name": "Tom de Grunt"
  },
  "bugs": {
    "url": "https://github.com/tdegrunt/jsonschema/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Austin Wright"
    }
  ],
  "dependencies": {},
  "deprecated": false,
  "description": "A fast and easy to use JSON Schema validator",
  "devDependencies": {
    "@stryker-mutator/core": "^4.0.0",
    "@stryker-mutator/mocha-runner": "^4.0.0",
    "chai": "~4.2.0",
    "eslint": "^7.7.0",
    "json-metaschema": "^1.2.0",
    "mocha": "~8.1.1"
  },
  "engines": {
    "node": "*"
  },
  "homepage": "https://github.com/tdegrunt/jsonschema#readme",
  "keywords": [
    "json",
    "jsonschema",
    "schema",
    "validation",
    "validator"
  ],
  "license": "MIT",
  "main": "./lib/index.js",
  "name": "jsonschema",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://secure.travis-ci.org/tdegrunt/jsonschema.svg)](http://travis-ci.org/tdegrunt/jsonschema)\n\n# jsonschema\n\n[JSON schema](http://json-schema.org/) validator, which is designed to be fast and simple to use.\nThe latest IETF published draft is v6, this library is mostly v4 compatible.\n\n## Contributing & bugs\n\nPlease fork the repository, make the changes in your fork and include tests. Once you're done making changes, send in a pull request.\n\n### Bug reports\n\nPlease include a test which shows why the code fails.\n\n## Usage\n\n### Simple\n\nSimple object validation using JSON schemas.\n\n```javascript\nvar Validator = require('jsonschema').Validator;\nvar v = new Validator();\nvar instance = 4;\nvar schema = {\"type\": \"number\"};\nconsole.log(v.validate(instance, schema));\n```\n\n### Even simpler\n\n```javascript\nvar validate = require('jsonschema').validate;\nconsole.log(validate(4, {\"type\": \"number\"}));\n```\n\n### Complex example, with split schemas and references\n\n```javascript\nvar Validator = require('jsonschema').Validator;\nvar v = new Validator();\n\n// Address, to be embedded on Person\nvar addressSchema = {\n  \"id\": \"/SimpleAddress\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"lines\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"}\n    },\n    \"zip\": {\"type\": \"string\"},\n    \"city\": {\"type\": \"string\"},\n    \"country\": {\"type\": \"string\"}\n  },\n  \"required\": [\"country\"]\n};\n\n// Person\nvar schema = {\n  \"id\": \"/SimplePerson\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\"type\": \"string\"},\n    \"address\": {\"$ref\": \"/SimpleAddress\"},\n    \"votes\": {\"type\": \"integer\", \"minimum\": 1}\n  }\n};\n\nvar p = {\n  \"name\": \"Barack Obama\",\n  \"address\": {\n    \"lines\": [ \"1600 Pennsylvania Avenue Northwest\" ],\n    \"zip\": \"DC 20500\",\n    \"city\": \"Washington\",\n    \"country\": \"USA\"\n  },\n  \"votes\": \"lots\"\n};\n\nv.addSchema(addressSchema, '/SimpleAddress');\nconsole.log(v.validate(p, schema));\n```\n### Example for Array schema\n\n```json\nvar arraySchema = {\n        \"type\": \"array\",\n        \"items\": {\n            \"properties\": {\n                \"name\": { \"type\": \"string\" },\n                \"lastname\": { \"type\": \"string\" }\n            },\n            \"required\": [\"name\", \"lastname\"]\n        }\n    }\n```\nFor a comprehensive, annotated example illustrating all possible validation options, see [examples/all.js](./examples/all.js)\n\n## Features\n\n### Definitions\n\nAll schema definitions are supported, $schema is ignored.\n\n### Types\n\nAll types are supported\n\n### Handling `undefined`\n\n`undefined` is not a value known to JSON, and by default, the validator treats it as if it is not invalid. i.e., it will return valid.\n\n```javascript\nvar res = validate(undefined, {type: 'string'});\nres.valid // true\n```\n\nThis behavior may be changed with the \"required\" option:\n\n```javascript\nvar res = validate(undefined, {type: 'string'}, {required: true});\nres.valid // false\n```\n\n### Formats\n\n#### Disabling the format keyword.\n\nYou may disable format validation by providing `disableFormat: true` to the validator\noptions.\n\n#### String Formats\n\nAll formats are supported, phone numbers are expected to follow the [E.123](http://en.wikipedia.org/wiki/E.123) standard.\n\n#### Custom Formats\n\nYou may add your own custom format functions.  Format functions accept the input\nbeing validated and return a boolean value.  If the returned value is `true`, then\nvalidation succeeds.  If the returned value is `false`, then validation fails.\n\n* Formats added to `Validator.prototype.customFormats` do not affect previously instantiated\nValidators.  This is to prevent validator instances from being altered once created.\nIt is conceivable that multiple validators may be created to handle multiple schemas\nwith different formats in a program.\n* Formats added to `validator.customFormats` affect only that Validator instance.\n\nHere is an example that uses custom formats:\n\n```javascript\nValidator.prototype.customFormats.myFormat = function(input) {\n  return input === 'myFormat';\n};\n\nvar validator = new Validator();\nvalidator.validate('myFormat', {type: 'string', format: 'myFormat'}).valid; // true\nvalidator.validate('foo', {type: 'string', format: 'myFormat'}).valid; // false\n```\n\n### Results\n\nBy default, results will be returned in a `ValidatorResult` object with the following properties:\n\n* `instance`: any.\n* `schema`: Schema.\n* `errors`: ValidationError[].\n* `valid`: boolean.\n\nEach item in `errors` is a `ValidationError` with the following properties:\n\n* path: array. An array of property keys or array offsets, indicating where inside objects or arrays the instance was found.\n* property: string. Describes the property path. Starts with `instance`, and is delimited with a dot (`.`).\n* message: string. A human-readable message for debugging use. Provided in English and subject to change.\n* schema: object. The schema containing the keyword that failed\n* instance: any. The instance that failed\n* name: string. The keyword within the schema that failed.\n* argument: any. Provides information about the keyword that failed.\n\nThe validator can be configured to throw in the event of a validation error:\n\n* If the `throwFirst` option is set, the validator will terminate validation at the first encountered error and throw a `ValidatorResultError` object.\n\n* If the `throwAll` option is set, the validator will throw a `ValidatorResultError` object after the entire instance has been validated.\n\n* If the `throwError` option is set, it will throw at the first encountered validation error (like `throwFirst`), but the `ValidationError` object itself will be thrown. Note that, despite the name, this does not inherit from Error like `ValidatorResultError` does.\n\nThe `ValidatorResultError` object has the same properties as `ValidatorResult` and additionally inherits from Error.\n\n#### \"nestedErrors\" option\n\nWhen `oneOf` or `anyOf` validations fail, errors that caused any of the sub-schemas referenced therein to fail are normally suppressed, because it is not necessary to fix all of them. And in the case of `oneOf`, it would itself be an error to fix all of the listed errors.\n\nThis behavior may be configured with `options.nestedErrors`. If truthy, it will emit all the errors from the subschemas. This option may be useful when troubleshooting validation errors in complex schemas:\n\n```javascript\nvar schema = {\n  oneOf: [\n    { type: 'string', minLength: 32, maxLength: 32 },\n    { type: 'string', maxLength: 16 },\n    { type: 'number' },\n  ]\n};\nvar validator = new Validator();\nvar result = validator.validate('This string is 28 chars long', schema, {nestedErrors: true});\n\n// result.toString() reads out:\n// 0: instance does not meet minimum length of 32\n// 1: instance does not meet maximum length of 16\n// 2: instance is not of a type(s) number\n// 3: instance is not exactly one from [subschema 0],[subschema 1],[subschema 2]\n```\n\n#### Localizing Error Messages\n\nTo provide localized, human-readable errors, use the `name` string as a translation key. Feel free to open an issue for support relating to localizing error messages. For example:\n\n```\nvar localized = result.errors.map(function(err){\n  return localeService.translate(err.name);\n});\n```\n\n### Custom keywords\n\nSpecify your own JSON Schema keywords with the validator.attributes property:\n\n```javascript\nvalidator.attributes.contains = function validateContains(instance, schema, options, ctx) {\n  if(typeof instance !== 'string') return;\n  if(typeof schema.contains !== 'string') throw new jsonschema.SchemaError('\"contains\" expects a string', schema);\n  if(instance.indexOf(schema.contains)<0){\n    return 'does not contain the string ' + JSON.stringify(schema.contains);\n  }\n}\nvar result = validator.validate(\"I am an instance\", { type:\"string\", contains: \"I am\" });\n// result.valid === true;\n```\n\nThe instance passes validation if the function returns nothing. A single validation error is produced\nif the function returns a string. Any number of errors (maybe none at all) may be returned by passing a\n`ValidatorResult` object, which may be used like so:\n\n```javascript\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  while(someErrorCondition()){\n    result.addError('fails some validation test');\n  }\n  return result;\n```\n\n### Dereferencing schemas\n\nSometimes you may want to download schemas from remote sources, like a database, or over HTTP. When importing a schema,\nunknown references are inserted into the `validator.unresolvedRefs` Array. Asynchronously shift elements off this array and import\nthem:\n\n```javascript\nvar Validator = require('jsonschema').Validator;\nvar v = new Validator();\nv.addSchema(initialSchema);\nfunction importNextSchema(){\n  var nextSchema = v.unresolvedRefs.shift();\n  if(!nextSchema){ done(); return; }\n  databaseGet(nextSchema, function(schema){\n    v.addSchema(schema);\n    importNextSchema();\n  });\n}\nimportNextSchema();\n```\n\n### Default base URI\n\nSchemas should typically have an `id` with an absolute, full URI. However if the schema you are using contains only relative URI references, the `base` option will be used to resolve these.\n\nThis following example would throw a `SchemaError` if the `base` option were unset:\n\n```javascript\nvar result = validate([\"Name\"], {\n  id: \"/schema.json\",\n  type: \"array\",\n  items: { $ref: \"http://example.com/schema.json#/definitions/item\" },\n  definitions: {\n    item: { type: \"string\" },\n  },\n}, { base: 'http://example.com/' });\n```\n\n### Rewrite Hook\n\nThe `rewrite` option lets you change the value of an instance after it has successfully been validated. This will mutate the `instance` passed to the validate function. This can be useful for unmarshalling data and parsing it into native instances, such as changing a string to a `Date` instance.\n\nThe `rewrite` option accepts a function with the following arguments:\n\n* instance: any\n* schema: object\n* options: object\n* ctx: object\n* return value: any new value for the instance\n\nThe value may be removed by returning `undefined`.\nIf you don't want to change the value, call `return instance`.\n\nHere is an example that can convert a property expecting a date into a Date instance:\n\n```javascript\nconst schema = {\n  properties: {\n    date: {id: 'http://example.com/date', type: 'string'},\n  },\n};\n\nconst value = {\n  date: '2020-09-30T23:39:27.060Z',\n};\n\nfunction unmarshall(instance, schema){\n  if(schema.id === 'http://example.com/date'){\n    return new Date(instance);\n  }\n  return instance;\n}\n\nconst v = new Validator();\nconst res = v.validate(value, schema, {rewrite: unmarshall});\n\nassert(res.instance.date instanceof Date);\n```\n\n\n### Pre-Property Validation Hook\n\nIf some processing of properties is required prior to validation a function may be passed via the options parameter of the validate function. For example, say you needed to perform type coercion for some properties:\n\n```javascript\n// See examples/coercion.js\nfunction preValidateProperty(object, key, schema, options, ctx) {\n  var value = object[key];\n  if (typeof value === 'undefined') return;\n\n  // Test if the schema declares a type, but the type keyword fails validation\n  if (schema.type && validator.attributes.type.call(validator, value, schema, options, ctx.makeChild(schema, key))) {\n    // If the type is \"number\" but the instance is not a number, cast it\n    if(schema.type==='number' && typeof value!=='number'){\n      object[key] = parseFloat(value);\n      return;\n    }\n    // If the type is \"string\" but the instance is not a string, cast it\n    if(schema.type==='string' && typeof value!=='string'){\n      object[key] = String(value).toString();\n      return;\n    }\n  }\n};\n\n// And now, to actually perform validation with the coercion hook!\nv.validate(instance, schema, { preValidateProperty });\n```\n\n### Skip validation of certain keywords\n\nUse the \"skipAttributes\" option to skip validation of certain keywords. Provide an array of keywords to ignore.\n\nFor skipping the \"format\" keyword, see the disableFormat option.\n\n### Fail on unknown keywords\n\nBy default, JSON Schema is supposed to ignore unknown schema keywords.\n\nYou can change this behavior to require that all keywords used in a schema have a defined behavior, by using setting the \"allowUnknownAttributes\" option to false.\n\nThis example will throw a `SchemaError`:\n\n```javascript\nvar schema = {\n  type: \"string\",\n  format: \"email\",\n  example: \"foo\",\n};\nvar result = validate(\"Name\", schema, { allowUnknownAttributes: false });\n```\n\n## Tests\n\nUses [JSON Schema Test Suite](https://github.com/json-schema/JSON-Schema-Test-Suite) as well as our own tests.\nYou'll need to update and init the git submodules:\n\n    git submodule update --init\n    npm test\n\n## Contributions\n\nThis library would not be possible without the valuable contributions by:\n\n- Austin Wright\n\n... and many others!\n\n## License\n\n    jsonschema is licensed under MIT license.\n\n    Copyright (C) 2012-2019 Tom de Grunt <tom@degrunt.nl>\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy of\n    this software and associated documentation files (the \"Software\"), to deal in\n    the Software without restriction, including without limitation the rights to\n    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n    of the Software, and to permit persons to whom the Software is furnished to do\n    so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/tdegrunt/jsonschema.git"
  },
  "scripts": {
    "stryker": "stryker run",
    "test": "mocha -R spec"
  },
  "typings": "./lib/index.d.ts",
  "version": "1.4.0"
}
